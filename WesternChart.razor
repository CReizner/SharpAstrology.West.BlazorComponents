@using SharpAstrology.Enums
@using SharpAstrology.West.BlazorComponents.SubComponents


<style>
    .house:hover > path {
        fill: @HoverColor;
    }
    .cross:hover {
        stroke: @HoverColor;
        color: @HoverColor;
    }
    .aspect:hover {
        stroke: @HoverColor;
    }
</style>
<svg width="@Width" height="" viewBox="@_viewBox" stroke-width="0.01" stroke="@StrokeColor">
<!-- region Inner Wheel -->
@switch (ShowOnInnerWheel)
{
    case WheelOptions.Signs:
        <g transform=@($"rotate({S(_zero)})")>
            <_zodiacWheel RelativeOuterRadius="1.05" RelativeInnerRadius="0.85" 
                          OnClickCallback="(zodiac)=>OnClickCallback.InvokeAsync(zodiac)" />
        </g>
        break;
    case WheelOptions.Constellations:
        <g transform=@($"rotate({S(_zero-Chart.Ayanamsa)})")>
            <_zodiacWheel RelativeOuterRadius="1.05" RelativeInnerRadius="0.85" 
                          OnClickCallback="(zodiac)=>OnClickCallback.InvokeAsync(zodiac)" />
        </g>
        break;
}
<!-- endregion -->
    
<!-- region Outer Wheel -->
@switch (ShowOnOuterWheel)
{
    case WheelOptions.Signs:
        <g transform=@($"rotate({S(_zero)})")>
            <_zodiacWheel RelativeOuterRadius="1.25" RelativeInnerRadius="1.05" 
                          OnClickCallback="(zodiac)=>OnClickCallback.InvokeAsync(zodiac)" />
        </g>
        break;
    case WheelOptions.Constellations:
        <g transform=@($"rotate({S(_zero-Chart.Ayanamsa)})")>
            <_zodiacWheel RelativeOuterRadius="1.25" RelativeInnerRadius="1.05" 
                          OnClickCallback="(zodiac)=>OnClickCallback.InvokeAsync(zodiac)" />
        </g>
        break;
}
<!-- endregion -->

<!-- region Degrees -->
@for (var deg = 0; deg < 360; deg++)
{
    <line x1="0.85" y1="0" x2=@(deg % 10 == 0 ? "0.82" : "0.83") y2="0" 
          stroke-width=@(deg % 10 == 0 ? "0.008" : "0.005") transform=@($"rotate({S(_zero - deg)})")/>
}
<!-- endregion -->
    
<!-- region House Cusps -->
@if (Chart.HousePositions is not null)
{
    foreach (var i in new[] {0,1,2,3,4,5,6,7,8,9,10,11})
    {
        <!-- House Box -->
        var angle = Chart.HousePositions.HouseCusps[(Houses) ((i + 1) % 12 + 1)] - Chart.HousePositions.HouseCusps[(Houses)(i % 12 + 1)];
        <g transform=@($"rotate({_getOffset(i + 1)})") class="house" @onclick="() => OnClickCallback.InvokeAsync((Houses)(i + 1))">
            @if (i % 3 == 0)
            {
                <line x1="0.85" y1="0" x2="0.6" y2="0" />
            }
            <path d="M 0.85 0
                 A 0.85 0.85 0 0 0 @(_getPointAsString(angle, 0.85))
                 L @_getPointAsString(angle, 0.6)
                 A 0.6 0.6 0 0 1 0.6 0
                 Z"
                  fill="transparent" 
                  fill-opacity="0.4" stroke-width="0.005" stroke-opacity="0.4"/>

            @if (ShowOnOuterWheel == WheelOptions.Signs)
            {
                <path d="M 1.25 0
                     A 1.25 1.25 0 0 0 @(_getPointAsString(angle, 1.25))
                     L @_getPointAsString(angle, 1.05)
                     A 1.05 1.05 0 0 1 1.05 0
                     Z"
                      fill="transparent" fill-opacity="0.4" stroke-width="0.005" stroke-opacity="0.4"/>
                @if (i % 3 == 0)
                {
                    <line x1="1.25" y1="0" x2="1.05" y2="0" />
                }
            }
            @if (ShowOnInnerWheel == WheelOptions.Signs)
            {
                <path d="M 1.05 0
                     A 1.05 1.05 0 0 0 @(_getPointAsString(angle, 1.05))
                     L @_getPointAsString(angle, 0.85)
                     A 0.85 0.85 0 0 1 0.85 0
                     Z"
                      fill="transparent" fill-opacity="0.4" stroke-width="0.005" stroke-opacity="0.4"/>
                @if (i % 3 == 0)
                {
                    <line x1="1.05" y1="0" x2="0.85" y2="0" />
                }
            }
        </g>

        <!-- House Number -->
        var houseNumberPosition = _getPoint(Chart.HousePositions.HouseCusps[(Houses) (i + 1)]+3, 0.63);
        <g transform="translate(-0.025 -0.025)">
            <svg x="@S(houseNumberPosition.x)" 
                 y="@S(houseNumberPosition.y)" 
                 width="0.05" height="0.05" viewBox="0 0 1 1" fill="none" stroke-width="0.05">
                <text x="0.5" y="0.8" letter-spacing="initial" text-anchor="middle" font-size="6%"
                      style="pointer-events: none">
                    @(i+1)
                </text>
            </svg>
        </g>
    }   
}
else
{
    <path d="M 0.85 0
             L 0.6 0
             A 0.6 0.6 0 0 0 -0.6 0
             L -0.85 0
             A 0.85 0.85 0 1 1 0.85 0
             Z"
          fill="transparent" fill-opacity="0.4" stroke="transparent" />
    <path d="M 0.85 0
             L 0.6 0
             A 0.6 0.6 0 0 1 -0.6 0
             L -0.85 0
             A 0.85 0.85 0 1 0 0.85 0
             Z"
          fill="transparent" fill-opacity="0.4" stroke="transparent"/>
    <circle cx="0" cy="0" fill="transparent" r="0.6" />
}
<!-- endregion -->
    
<!-- region Planets -->
@foreach (var (planet, longitude) in _outerPlanetDisplay)
{
    var objectPosition = _getPoint(longitude, 0.75);
    var linePosition = _getPoint(Chart.PositionOf(planet).Longitude, 1);
    <_planet Planet="planet"
             Color="#040E23FF"
             ImagePositionX="@objectPosition.x" ImagePositionY="@objectPosition.y"
             LinePositionX="@linePosition.x" LinePositionY="@linePosition.y" 
             ShowRetrograde="Chart.MotionOf(planet) == Motion.Retrograde"
             OnClickCallback="(obj)=>OnClickCallback.InvokeAsync(obj)" />
}
@foreach (var (planet, longitude) in _innerPlanetDisplay)
{
    var objectPosition = _getPoint(longitude, 0.65);
    var linePosition = _getPoint(Chart.PositionOf(planet).Longitude, 1);
    <_planet Planet="planet"
             Color="#040E23FF"
             ImagePositionX="@objectPosition.x" ImagePositionY="@objectPosition.y"
             LinePositionX="@linePosition.x" LinePositionY="@linePosition.y" 
             ShowRetrograde="Chart.MotionOf(planet) == Motion.Retrograde"
             OnClickCallback="(obj)=>OnClickCallback.InvokeAsync(obj)" />
}
    
@if (PlanetsPositionsOther is not null && 
     (ShowOnOuterWheel == WheelOptions.Comparator || ShowOnInnerWheel == WheelOptions.Comparator))
{
    var radius = ShowOnOuterWheel == WheelOptions.Comparator ? 1.15 : 0.95;
    foreach (var (planet, longitude) in _outerPlanetDisplayOther)
    {
        var objectPosition = _getPoint(longitude, radius+(ShowOnOuterWheel == WheelOptions.Comparator ? -0.05 : 0.05));
        var linePosition = _getPoint(PlanetsPositionsOther[planet].Longitude, 1);
        <_planet Planet="planet" Color="green"
                 ImagePositionX="@objectPosition.x" ImagePositionY="@objectPosition.y"
                 LinePositionX="@linePosition.x" LinePositionY="@linePosition.y" 
                 ShowRetrograde="Chart.MotionOf(planet) == Motion.Retrograde"
                 OnClickCallback="(obj)=>OnClickCallback.InvokeAsync(obj)" />

    }
    foreach (var (planet, longitude) in _innerPlanetDisplayOther)
    {
        var objectPosition = _getPoint(longitude, radius+(ShowOnOuterWheel == WheelOptions.Signs ? 0.05 : -0.05));
        var linePosition = _getPoint(PlanetsPositionsOther[planet].Longitude, 1);
        <_planet Planet="planet" Color="green"
                 ImagePositionX="@objectPosition.x" ImagePositionY="@objectPosition.y"
                 LinePositionX="@linePosition.x" LinePositionY="@linePosition.y" 
                 ShowRetrograde="Chart.MotionOf(planet) == Motion.Retrograde"
                 OnClickCallback="(obj)=>OnClickCallback.InvokeAsync(obj)" />
    }
}
<!-- endregion -->

<!-- region Cross -->

@if (Chart.HousePositions is not null)
{
    
    <g letter-spacing="initial" font-size="0.16%">
        <!-- Ascendant -->
        <g @onclick="@(()=>OnClickCallback.InvokeAsync(Cross.Asc))" class="cross" fill="transparent">
            <text x="@(_outer ? "-1.31" : "-1.11")" y="-0.02" stroke-width="0.002" cursor="default">
                ASC
            </text>
            <line x1="@(_outer ? "-1.35" : "-1.15")" y1="0" x2="@(_outer ? "-1.25" : "-1.05")" y2="0"/>
            <line x1="@(_outer ? "-1.35" : "-1.15")" y1="0" x2="@(_outer ? "-1.32" : "-1.12")" y2="-0.03"/>
            <line x1="@(_outer ? "-1.35" : "-1.15")" y1="0" x2="@(_outer ? "-1.32" : "-1.12")" y2="0.03"/>
        </g>

        <g @onclick="@(()=>OnClickCallback.InvokeAsync(Cross.Dc))" class="cross" fill="transparent">
        <!-- Descendant -->
            <text x="@(_outer ? "1.27" : "1.07")" y="-0.02" stroke-width="0.002" cursor="default">
                DC
            </text>
            <line x1="@(_outer ? "1.35" : "1.15")" y1="0" x2="@(_outer ? "1.25" : "1.05")" y2="0"/>
        </g>

        <g transform=@($"rotate({S(_zero - Chart.HousePositions.Cross[Cross.Mc])})") fill="transparent">
            <!-- MC -->
            <g @onclick="@(()=>OnClickCallback.InvokeAsync(Cross.Mc))" class="cross">
                <text x="@(_outer ? "1.27" : "1.07")" y="-0.02" stroke-width="0.002" cursor="default">
                    MC
                </text>
                <line x1="@(_outer ? "1.35" : "1.15")" y1="0" x2="@(_outer ? "1.25" : "1.05")" y2="0"/>
                <line x1="@(_outer ? "1.35" : "1.15")" y1="0" x2="@(_outer ? "1.32" : "1.12")" y2="-0.03"/>
                <line x1="@(_outer ? "1.35" : "1.15")" y1="0" x2="@(_outer ? "1.32" : "1.12")" y2="0.03"/>
            </g>

            <!-- IC -->
            <g @onclick="@(()=>OnClickCallback.InvokeAsync(Cross.Ic))" class="cross" fill="transparent">
                <text x="@(_outer ? "-1.31" : "-1.11")" y="-0.02" stroke-width="0.002" cursor="default">
                    IC
                </text>
                <line x1="@(_outer ? "-1.35" : "-1.15")" y1="0" x2="@(_outer ? "-1.25" : "-1.05")" y2="0"/>
            </g>
        </g>

        <circle cx="0" cy="0" r="0.1" fill="transparent" opacity="0.2"/>
    </g>
}
<!-- endregion -->

<!-- region Aspects -->
@if (ShowAspectsToOther 
     && PlanetsPositionsOther is not null
     && (ShowOnInnerWheel == WheelOptions.Signs || ShowOnOuterWheel == WheelOptions.Signs))
{
    // var objectsOfNoneRelevance = new HashSet<Planets>();
    foreach (var (obj1, dict) in _aspects)
    {
        foreach (var (obj2, aspect) in dict
            .Where(p=>p.Value != Aspects.None && p.Value != Aspects.Conjunction))
        {
            var pos1 = _getPoint(Chart.PositionOf(obj1).Longitude, 0.57);
            var pos2 = _getPoint(PlanetsPositionsOther[obj2].Longitude, 0.57);
            <line x1="@S(pos1.x)" y1="@S(pos1.y)"
                  x2="@S(pos2.x)" y2="@S(pos2.y)" 
                  stroke="@AspectsColorMap[aspect]" stroke-width="0.013" stroke-opacity="0.7" />
        }
    }
}
else
{
    var objectsOfNoneRelevance = new HashSet<Planets>();
    foreach (var (obj1, dict) in _aspects)
    {
        objectsOfNoneRelevance.Add(obj1);
        foreach (var (obj2, aspect) in dict
            .Where(p=>!objectsOfNoneRelevance.Contains(p.Key))
            .Where(p=>p.Value != Aspects.None && p.Value != Aspects.Conjunction))
        {
            if((obj1 == Planets.NorthNode && obj2 == Planets.SouthNode) 
               || (obj1 == Planets.SouthNode && obj2 == Planets.NorthNode)) continue;
                
            var pos1 = _getPoint(Chart.PositionOf(obj1).Longitude, 0.57);
            var pos2 = _getPoint(Chart.PositionOf(obj2).Longitude, 0.57);
            <line x1="@S(pos1.x)" y1="@S(pos1.y)"
                  x2="@S(pos2.x)" y2="@S(pos2.y)" 
                  stroke="@AspectsColorMap[aspect]" stroke-width="0.013" stroke-opacity="0.7" />
        }
    }
}
<!-- endregion -->

</svg>
